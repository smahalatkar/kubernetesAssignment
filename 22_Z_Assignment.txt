Learning Objectives:-
Create a PersistentVolume
Create a PersistentVolumeClaim
Create a MySQL Pod configured to use the PersistentVolumeClaim

Problem Statement:-
Your company needs a small database server to support a new application. 
They have asked you to deploy a pod running a MySQL container, but they want the data to persist even if the pod is deleted or replaced. 
Therefore, the MySQL database pod requires persistent storage.


You will need to do the following:-

1. Create a PersistentVolume:
	The PersistentVolume should be named mysql-pv.
	The volume needs a capacity of 1Gi.
	Use a storageClassName of localdisk.
	Use the accessMode ReadWriteOnce.
	Store the data locally on the node using a hostPath volume at the location /mnt/data.

2. Create a PersistentVolumeClaim:
	The PersistentVolumeClaim should be named mysql-pv-claim.
	Set a resource request on the claim for 500Mi of storage.
	Use the same storageClassName and accessModes as the PersistentVolume so that this claim can bind to the PersistentVolume.

3. Create a MySQL Pod configured to use the PersistentVolumeClaim:
	The Pod should be named mysql-pod.
	Use the image mysql:5.6.
	Expose the containerPort 3306.
	Set an environment variable called MYSQL_ROOT_PASSWORD with the value password.
	Add the PersistentVolumeClaim as a volume and mount it to the container at the path /var/lib/mysql.


vi mysql-pv.yml

apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
spec:
  storageClassName: localdisk
  capacity:
    storage: 1Gi
  accessModes:
  - ReadWriteOnce
  hostPath:
    path: "/mnt/data" 

kubectl apply -f mysql-pv.yml 
mysql-pv created

vi mysql-pv-claim.yml

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: localdisk
  resources:
    requests:
      storage: 500Mi   

kubectl apply mysql-pv-claim.yml 	 
mysql-pv-claim created
 	 
vi db-password.yml 
 	  
apiVersion: v1
kind: Secret
metadata:
  name: mysql-root-password
stringData:
  mykey: Kub3rn3t3sRul3s!
 	 
kubectl apply -f db-password.yml
secret/mysql-root-password created 	 
 	 
vi mysql-pod.yml 
 	 
apiVersion: v1
kind: Pod
metadata:
  name: mysql-pod
spec:
  containers:
  - name: mysql
    image: mysql:5.6
    ports:
    - containerPort: 3306
    env:
    - name: MYSQL_ROOT_PASSWORD
      valueFrom:
        secretKeyRef:
          name: mysql-root-password
          key: mykey
    volumeMounts:
    - mountPath: "/var/lib/mysql"
      name: my-storage
  volumes:
  - name: my-storage
    persistentVolumeClaim:
      claimName: mysql-pv-claim 

$ kubectl apply -f mysql-pod.yaml
pod/mysql-pod created 

$ kubectl get pods
NAME        READY   STATUS    RESTARTS   AGE
mysql-pod   1/1     Running   0          4m48s

$ kubectl get pv
NAME       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                    STORAGECLASS   REASON   AGE
mysql-pv   1Gi        RWO            Retain           Bound    default/mysql-pv-claim   localdisk            5m12s

$ kubectl describe pv mysql-pv
Name:            mysql-pv
Labels:          <none>
Annotations:     kubectl.kubernetes.io/last-applied-configuration:
                   {"apiVersion":"v1","kind":"PersistentVolume","metadata":{"annotations":{},"name":"mysql-pv"},"spec":{"accessModes":["ReadWriteOnce"],"capa...
                 pv.kubernetes.io/bound-by-controller: yes
Finalizers:      [kubernetes.io/pv-protection]
StorageClass:    localdisk
Status:          Bound
Claim:           default/mysql-pv-claim
Reclaim Policy:  Retain
Access Modes:    RWO
VolumeMode:      Filesystem
Capacity:        1Gi
Node Affinity:   <none>
Message:
Source:
    Type:          HostPath (bare host directory volume)
    Path:          /mnt/data
    HostPathType:
Events:            <none>
 
$ kubectl get pvc
NAME             STATUS   VOLUME     CAPACITY   ACCESS MODES   STORAGECLASS   AGE
mysql-pv-claim   Bound    mysql-pv   1Gi        RWO            localdisk      9m18s

$ kubectl get po -o wide mysql-pod
NAME        READY   STATUS    RESTARTS   AGE     IP          NODE     NOMINATED NODE   READINESS GATES
mysql-pod   1/1     Running   1          9m25s   10.44.0.1   node01   <none>           <none>

df -h /var/lib/mysql
Filesystem      Size  Used Avail Use% Mounted on
/dev/vda1        45G   19G   24G  44% /var/lib/mysql

root@mysql-pod:/var/lib/mysql# echo "MySql Pod" >test1.txt

 ls
auto.cnf  ib_logfile0  ib_logfile1  ibdata1  mysql  performance_schema  test  test1.txt

Testing
========

kubectl delete -f mysql-pod.yml
pod "mysql-pod" deleted


again create mysql-pod to test whether "test1.txt" file is still there or not

create mysql-pod

$ kubectl create -f mysql-pod.yml
pod/mysql-pod created

$ kubectl exec -it mysql-pod bash
root@mysql-pod:/#

root@mysql-pod:/#exit
exit

kubectl exec mysql-pod ls /var/lib/mysql
auto.cnf
ib_logfile0
ib_logfile1
ibdata1
mysql
performance_schema
test1.txt

kubectl exec mysql-pod cat /var/lib/mysql/test1.txt
MySql Pod


"test1.txt" file is still there inside the mysql container

Testing password assigned in the yml file and execute some query inside the container
=====================================================================================

root@ip-172-31-6-120:/# kubectl exec -it mysql-pod bash
root@mysql-pod:/# mysql -u root -ppassword
Warning: Using a password on the command line interface can be insecure.
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 1
Server version: 5.6.46 MySQL Community Server (GPL)

Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> create database kubectl_database
    -> ;
Query OK, 1 row affected (0.00 sec)

mysql> using kubectl_database;
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'using kubectl_database' at line 1
mysql> use kubectl_database;
Database changed
mysql> show tables
    -> ;
Empty set (0.00 sec)

mysql> CREATE TABLE MyTask (
    -> id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    -> firstname VARCHAR(30) NOT NULL,
    -> lastname VARCHAR(30) NOT NULL,
    -> email VARCHAR(50)
    -> );
Query OK, 0 rows affected (0.01 sec)

mysql> show tables
    -> ;
+----------------+
| Tables_in_Prod |
+----------------+
| MyTask       |
+----------------+
1 row in set (0.00 sec)